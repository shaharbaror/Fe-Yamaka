import numpy
import cv2
import random
import imutils

seed = [[0.34, 0.0], [0.72, 0.0], [0.54, 0.0], [0.23, -0.8], [0.28, -0.94], [0.1, -0.36], [-0.62, -0.4], [-0.69, -0.45], [-0.18, -0.11], [-0.69, 0.59], [-0.23, 0.2], [-0.38, 0.33], [0.15, 0.33], [0.0, 0.01], [0.04, 0.1], [0.59, -0.07], [0.05, 0.0], [0.46, -0.06], [0.14, -0.93], [0.11, -0.72], [0.11, -0.73], [-0.75, -0.35], [-0.65, -0.31], [-0.6, -0.28], [-0.5, 0.55], [-0.59, 0.66], [-0.24, 0.27], [0.08, 0.13], [0.37, 0.6], [0.07, 0.11], [0.19, -0.05], [0.25, -0.06], [0.44, -0.12], [0.02, -0.98], [0.01, -0.68], [0.01, -0.48], [-0.24, -0.07], [-0.09, -0.03], [-0.2, -0.06], [-0.05, 0.08], [-0.48, 0.71], [-0.54, 0.8], [0.05, 0.06], [0.22, 0.27], [0.42, 0.51], [0.05, -0.02], [0.2, -0.08], [0.1, -0.04], [-0.03, -0.34], [-0.03, -0.33], [-0.06, -0.55], [-0.64, -0.11], [-0.55, -0.09], [-0.22, -0.04], [-0.12, 0.24], [-0.26, 0.52], [-0.01, 0.02], [0.49, 0.46], [0.05, 0.05], [0.43, 0.4], [0.78, -0.46], [0.3, -0.17], [0.26, -0.15], [-0.06, -0.24], [-0.1, -0.41], [-0.19, -0.77], [-0.88, -0.03], [-0.16, 0.0], [-0.7, -0.03], [-0.15, 0.45], [-0.28, 0.81], [-0.01, 0.04], [0.17, 0.12], [0.11, 0.08], [0.11, 0.08], [0.01, -0.01], [0.1, -0.08], [0.44, -0.34], [-0.31, -0.79], [-0.21, -0.53], [-0.26, -0.66], [-0.85, 0.07], [-0.45, 0.04], [-0.19, 0.01], [-0.11, 0.56], [-0.04, 0.23], [-0.02, 0.11], [0.41, 0.21], [0.11, 0.06], [0.21, 0.11], [0.67, -0.69], [0.52, -0.53], [0.44, -0.45], [-0.44, -0.8], [-0.26, -0.47], [-0.2, -0.37], [-0.44, 0.1], [-0.27, 0.06], [-0.74, 0.16], [-0.03, 0.48], [-0.02, 0.32], [0.0, 0.13], [0.62, 0.23], [0.44, 0.16], [0.14, 0.05], [0.32, -0.43], [0.15, -0.2], [0.21, -0.28], [-0.37, -0.49], [-0.13, -0.18], [-0.45, -0.6], [-0.13, 0.04], [-0.29, 0.1], [-0.41, 0.15], [0.04, 0.66], [0.03, 0.56], [0.04, 0.61], [0.32, 0.07], [0.4, 0.08], [0.52, 0.11], [0.09, -0.17], [0.21, -0.38], [0.24, -0.43], [-0.22, -0.22], [-0.25, -0.25], [-0.33, -0.34], [-0.06, 0.03], [-0.35, 0.18], [-0.72, 0.38], [0.13, 0.68], [0.03, 0.16], [0.13, 0.64], [0.06, 0.0], [0.77, 0.06], [0.65, 0.05], [0.19, -0.49], [0.13, -0.35], [0.05, -0.13], [-0.74, -0.58], [-0.21, -0.16], [-0.04, -0.03], [-0.25, 0.17], [-0.26, 0.19], [-0.34, 0.24], [0.12, 0.36], [0.07, 0.21], [0.28, 0.84], [0.16, 0.0], [0.96, -0.04], [0.79, -0.03], [0.05, -0.23], [0.13, -0.56], [0.15, -0.64], [-0.18, -0.11], [-0.42, -0.24], [-0.15, -0.09], [-0.46, 0.43], [0.0, 0.0], [-0.26, 0.24], [0.38, 0.77], [0.34, 0.67], [0.22, 0.44], [0.0, 0.0], [0.4, -0.07], [0.59, -0.1], [0.07, -0.65], [0.02, -0.19], [0.06, -0.54], [-0.16, -0.06], [-0.37, -0.15], [-0.3, -0.12], [-0.1, 0.13], [-0.43, 0.52], [-0.32, 0.39], [0.5, 0.73], [0.53, 0.78], [0.1, 0.15], [0.21, -0.07], [0.42, -0.13], [0.46, -0.14], [0.0, -0.33], [-0.01, -0.59], [-0.01, -0.65], [-0.01, 0.0], [-0.51, -0.13], [-0.55, -0.15], [-0.17, 0.28], [-0.21, 0.34], [-0.03, 0.05], [0.64, 0.71], [0.23, 0.26], [0.16, 0.17], [0.1, -0.05], [0.14, -0.06], [0.73, -0.34], [-0.1, -0.66], [-0.03, -0.2], [0.0, 0.0], [-0.26, -0.03], [-0.66, -0.08], [-0.23, -0.03], [-0.15, 0.35], [-0.03, 0.07], [-0.08, 0.2], [0.59, 0.5], [0.25, 0.21], [0.0, 0.0], [0.68, -0.44], [0.34, -0.22], [0.58, -0.38], [-0.18, -0.63], [-0.24, -0.82], [-0.07, -0.26], [-0.84, 0.0], [0.0, 0.0], [-0.2, 0.0]]


def map_points_circle():
    arr = []

    for i in range(72):
        for z in range(3):
            rand = int(random.random() * 100) * 0.01
            arr.append([int(numpy.cos(i * 5) * rand * 100) / 100, int(numpy.sin(i*5) * rand * 100) / 100])
    arr_as_str = "["
    for i in arr:
        arr_as_str += f"[{i[0]}, {i[1]}], "
    with open("seed.txt", "wb") as f:

        f.write(arr_as_str.encode())

def check_if_circle(frame, x, y, radius):
    counter = 0
    wid = len(frame)
    max = len(seed)
    print(max)
    for i in seed:
        x1 = int(x + radius * i[0])
        y1 = int(y + radius * i[1])
        print(x1, ", ",y1)
        print(len(frame),", y , ",len(frame[0]))
        num = frame[x1,y1] == [255,255,255]
        print(num)
        counter += num * 1
    print(counter)
    return counter > max * 0.8


greenLower = (0, 86, 6)
greenUpper = (10, 255, 255)
redLower2 = (160, 86, 6)
redUpper2 = (180, 255, 255)


im = cv2.imread("ball3.png")
frame = imutils.resize(im, width=600)
blurred = cv2.GaussianBlur(frame, (11, 11), 0)
hsv = cv2.cvtColor(blurred, cv2.COLOR_BGR2HSV)
# construct a mask for the color "green", then perform
# a series of dilations and erosions to remove any small
# blobs left in the mask
mask = cv2.inRange(hsv, greenLower, greenUpper)
mask2 = cv2.inRange(hsv, redLower2, redUpper2)
mask += mask2
mask = cv2.erode(mask, None, iterations=2)
mask = cv2.dilate(mask, None, iterations=2)

cnts = cv2.findContours(mask.copy(), cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
cnts = imutils.grab_contours(cnts)
center = None
# only proceed if at least one contour was found
if len(cnts) > 0:
    print("found thing")
    # find the largest contour in the mask, then use
    # it to compute the minimum enclosing circle and
    # centroid

    c = max(cnts, key=cv2.contourArea)
    ((x, y), radius) = cv2.minEnclosingCircle(c)
    print(check_if_circle(mask, x, y, radius))
